{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","require","setOptions","breaks","App","props","state","markdown","this","setState","className","class","id","style","width","height","marginLeft","marginRight","padding","value","onChange","e","updateMarkdown","target","console","log","backgroundColor","dangerouslySetInnerHTML","__html","React","Component","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"qQAMIA,EAASC,EAAQ,IAKrBD,EAAOE,WAAW,CAChBC,QAAQ,IAGR,IA8CMC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,SAlDe,kvCA+CD,E,kDAOlB,SAAeA,GACbC,KAAKC,SAAS,CAAEF,e,oBAGlB,WAAU,IAAD,OAkBP,OACE,qBAAKG,UAAU,MAAf,SAGE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,6BACE,sBAAMC,MAAM,wBAAZ,sCAIN,sBAAKD,UAAU,WAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,kBAAf,SAEE,6BAAI,sBAAMC,MAAM,iCAAZ,gCAGN,qBAAKD,UAAU,aAAf,SACE,0BACEE,GAAG,SACHF,UAAU,QACVG,MAvCG,CACfC,MAAO,QACPC,OAAQ,QACRC,WAAY,OACZC,YAAa,OACbC,QAAQ,QAmCIC,MAAOX,KAAKF,MAAMC,SAClBa,SAAU,SAACC,GACT,EAAKC,eAAeD,EAAEE,OAAOJ,QANjC,SASGK,QAAQC,IAAIjB,KAAKF,MAAMC,iBAQ9B,sBAAKG,UAAU,WAAf,UACE,qBAAKA,UAAU,kBAAf,SAEE,6BACE,sBAAMC,MAAM,iCAAZ,oCAIJ,qBAAKD,UAAU,cACbE,GAAG,UACHC,MAxDM,CAChBC,MAAO,QACPC,OAAQ,QACRW,gBAAiB,UACjBV,WAAY,OACZC,YAAa,OACbC,QAAS,QAmDCS,wBAAyB,CACvBC,OAAQ5B,EAAOQ,KAAKF,MAAMC,4B,GA/E1BsB,IAAMC,WAiGxBC,IAASC,OAAO,cAAC,EAAD,IAChBC,SAASC,eAAe,SAEX9B,QCrJA+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdL,IAASC,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEFX,SAASC,eAAe,SAM1BC,M","file":"static/js/main.e83f9746.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n\n\nlet marked = require(\"marked\");\n\n//let marked = require(\"marked\"); //Used code 'npm install marked --save'\n\n// ALLOWS LINE BREAKS WITH RETURN BUTTON\nmarked.setOptions({\n  breaks: true\n  })\n  \n  const initialMarkdown = `Welcome to my React Markdown Previewer!\n  # Here's a Heading\n  ## This is a sub-heading...\n  ### And here's some other cool stuff:\n  \n  How about an embedded image?\n  ![Chun Li Gif](https://www.fightersgeneration.com/nz7/char/chunli-sf4-stance-by-gravelee.gif#chunli)\n  \n  Heres some code, \\`<div></div>\\`, between 2 backticks.\n  \n  \\`\\`\\`\n  // this is multi-line code:\n  \n  function anotherExample(firstLine, lastLine) {\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n      return multiLineCode;\n    }\n  }\n  \\`\\`\\`\n  \n  You can also make text **bold**... whoa!\n  Or _italic_.\n  Or... wait for it... **_both!_**\n  And feel free to go crazy ~~crossing stuff out~~.\n  \n  There's also [links](https://www.freecodecamp.com), and\n  > Block Quotes!\n  \n  And if you want to get really crazy, even tables:\n  \n  Wild Header | Crazy Header | Another Header?\n  ------------ | ------------- | -------------\n  Your content can | be here, and it | can be here....\n  And here. | Okay. | I think we get it.\n  \n  - And of course there are lists.\n    - Some are bulleted.\n       - With different indentation levels.\n          - That look like this.\n  \n  \n  1. And there are numbererd lists too.\n  1. Use just 1s if you want!\n  1. Or not?\n  `\n  \n  class App extends React.Component {\n    constructor(props){  \n      super(props)\n      this.state = {\n        markdown:  initialMarkdown \n      };\n    }\n  \n    updateMarkdown(markdown) {\n      this.setState({ markdown });\n    }\n  \n    render() {\n  \n      var inputStyle = {\n        width: \"400px\",\n        height: \"150vh\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        padding:\"10px\"\n      };\n      var outputStyle = {\n        width: \"400px\",\n        height: \"150vh\",\n        backgroundColor: \"#DCDCDC\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        padding: \"10px\",\n      };\n  \n      return (\n        <div className=\"App\">\n  \n  \n          <div className=\"container\">\n            <div className=\"row mt-4\">\n              <div className=\"col text-center\">\n                <h1>\n                  <span class=\"badge badge-secondary\">Markdown Previewer</span>\n                </h1>\n              </div>\n            </div>\n            <div className=\"row mt-4\">\n              <div className=\"col-md-6\">\n                <div className=\"col text-center\">\n  \n                  <h4><span class=\"badge badge-pill badge-warning\">Markdown Input</span>\n                  </h4>\n                </div>\n                <div className=\"mark-input\">\n                  <textarea\n                    id=\"editor\"  \n                    className=\"input\"\n                    style={inputStyle}\n                    value={this.state.markdown}\n                    onChange={(e) => {\n                      this.updateMarkdown(e.target.value);\n                    }}\n                    > \n                    {console.log(this.state.markdown)}\n                    </textarea>\n                </div>\n  \n              </div>\n  \n  \n  \n              <div className=\"col-md-6\">\n                <div className=\"col text-center\">\n  \n                  <h4>\n                    <span class=\"badge badge-pill badge-success\">...and the Preview</span>\n                  </h4>\n                </div>\n  \n                <div className=\"mark-output\"\n                  id=\"preview\"\n                  style={outputStyle}\n                  dangerouslySetInnerHTML={{\n                    __html: marked(this.state.markdown),\n                  }}\n                  >\n                  \n                </div>\n                    \n              </div>\n  \n            </div>\n  \n          </div>\n        </div>\n      );\n    }\n  }\n  \n  \n  \n  ReactDOM.render(<App />,\n  document.getElementById(\"root\"))\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}